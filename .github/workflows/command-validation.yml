name: CLI Command and Test Suite Validation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-suite:
    name: Run Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock coverage

    - name: Run pytest with coverage
      run: |
        pytest tests/ --cov=prompt_manager --cov-report=term-missing

  test-cli-commands:
    name: Validate CLI Commands
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock gitpython>=3.1.0

    - name: Test CLI Commands
      run: |
        chmod +x ./tests/test_cli_commands.sh
        chmod +x ./tests/test_advanced_commands.sh
        ./tests/test_cli_commands.sh
        ./tests/test_advanced_commands.sh

  test-prompt-validation:
    name: Validate Prompt Templates
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock gitpython>=3.1.0

    - name: Verify prompt templates
      run: |
        # Verify all YAML templates are valid
        python -c "
        import yaml
        from pathlib import Path
        import sys
        
        errors = []
        template_dir = Path('prompt_manager/templates')
        
        for yaml_file in template_dir.rglob('*.yaml'):
            try:
                with open(yaml_file) as f:
                    data = yaml.safe_load(f)
                    # Validate required fields
                    if not all(key in data for key in ['name', 'template', 'required_context']):
                        errors.append(f'{yaml_file}: Missing required fields')
                    # Validate template format
                    if not isinstance(data['template'], str):
                        errors.append(f'{yaml_file}: Template must be a string')
                    if not isinstance(data['required_context'], list):
                        errors.append(f'{yaml_file}: Required context must be a list')
            except Exception as e:
                errors.append(f'{yaml_file}: {str(e)}')
        
        if errors:
            print('Template validation failed:')
            for error in errors:
                print(f'- {error}')
            sys.exit(1)
        else:
            print('All templates validated successfully')
        "

    - name: Test prompt display
      run: |
        # Initialize test environment
        mkdir -p test_project
        cd test_project
        prompt-manager init --path .
        
        # Create test files
        echo "def test():" > test_file.py
        echo "    pass" >> test_file.py
        
        # Test base commands
        echo "Testing base commands..."
        prompt-manager base add-task "test-task" "Test description" --show-prompt
        prompt-manager base update-progress "test-task" "in_progress" --show-prompt
        prompt-manager base list-tasks --show-prompt
        prompt-manager base export-tasks --output tasks.json --show-prompt
        prompt-manager base generate-bolt-tasks "Create a React dashboard" --framework react --show-prompt
        prompt-manager base generate-bolt-tasks "Create an API endpoint" --output bolt_tasks.json --show-prompt
        
        # Test advanced commands
        echo "Testing advanced commands..."
        prompt-manager base add-task "frontend-task" "Frontend implementation" --priority 2 --show-prompt
        prompt-manager base add-task "backend-task" "Backend implementation" --priority 1 --show-prompt
        prompt-manager base add-dependency frontend-task backend-task --show-prompt
        prompt-manager base list-dependencies frontend-task --show-prompt
        prompt-manager base list-tasks --status in_progress --sort-by priority --show-prompt
        
        # Test debug commands
        echo "Testing debug commands..."
        prompt-manager debug analyze-file test_file.py --show-prompt
        prompt-manager debug test-roadmap test_file.py --show-prompt
        
        # Test repo commands
        echo "Testing repo commands..."
        git init
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        git add .
        git commit -m "Initial commit"
        prompt-manager repo analyze-repo . --show-prompt
        prompt-manager repo learn-session . --duration 5 --show-prompt
        
        # Test LLM commands
        echo "Testing LLM commands..."
        prompt-manager llm analyze-impact test_file.py --show-prompt
        prompt-manager llm suggest-improvements test_file.py --show-prompt
        
        # Test memory commands
        echo "Testing memory commands..."
        prompt-manager memory store test-key "test value" --show-prompt
        prompt-manager memory retrieve test-key --show-prompt
        prompt-manager memory list-all --show-prompt
        
        # Verify all commands executed successfully
        for cmd in base debug llm repo improve memory; do
          echo "Verifying $cmd commands exist..."
          prompt-manager $cmd --help
          for subcmd in $(prompt-manager $cmd --help | grep -oE '^  [a-z-]+' | tr -d ' '); do
            if [[ "$subcmd" != "help" ]]; then
              echo "Verifying: $cmd $subcmd"
              if ! prompt-manager $cmd $subcmd --help | grep -q "Usage:"; then
                echo "Error: Invalid command $cmd $subcmd"
                exit 1
              fi
            fi
          done
        done

    - name: Verify memory integration
      run: |
        # Initialize test project
        mkdir test_project
        cd test_project
        prompt-manager init --path .
        
        # Verify memory files are created
        for file in memory/tasks.json memory/prompts.json memory/context.json; do
          if [ ! -f "$file" ]; then
            echo "Error: Memory file $file not found"
            exit 1
          fi
        done
        
        # Test memory commands with prompts
        prompt-manager memory store test-key "test value" --show-prompt
        prompt-manager memory retrieve test-key --show-prompt
        prompt-manager memory list-all --show-prompt
