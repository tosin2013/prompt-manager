name: Python Package

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        # Shallow clone to avoid getting Bazel history
        fetch-depth: 1
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create clean source
      run: |
        # Create a clean directory
        mkdir ../clean-source
        
        # Copy only Python package files and essential files
        cp -r prompt_manager ../clean-source/
        cp setup.py ../clean-source/
        cp MANIFEST.in ../clean-source/
        cp README.md ../clean-source/
        cp requirements.txt ../clean-source/
        cp -r tests ../clean-source/
        
        # Remove any Bazel files that might have been copied
        find ../clean-source -name "bazel-*" -type l -delete
        find ../clean-source -name ".bazel*" -type f -delete
        find ../clean-source -name "BUILD" -type f -delete
        find ../clean-source -name "WORKSPACE" -type f -delete
        
        # Verify no Bazel files exist
        if find ../clean-source -name "bazel*" -o -name ".bazel*" -o -name "BUILD" -o -name "WORKSPACE" | grep .; then
          echo "Found Bazel files in clean source!"
          exit 1
        fi
    
    - name: Build package
      run: |
        cd ../clean-source
        python -m build
    
    - name: Run tests
      run: |
        cd ../clean-source
        pytest tests/ --cov=prompt_manager
    
    - name: Upload dist artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.python-version }}
        path: ../clean-source/dist/
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == '3.8'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ../clean-source/dist/*.whl
          ../clean-source/dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
